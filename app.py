import os
import cv2
import numpy as np
import torch
import torch.nn as nn
from torchvision import models
from tkinter import Tk, Label, Button, filedialog
from PIL import Image, ImageTk

class InferenceApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Age & Gender Prediction")
        self.root.geometry("600x500")
        self.root.configure(bg="#f0f0f0")  # M√†u n·ªÅn giao di·ªán

        # Label ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh
        self.image_label = Label(root, bg="#f0f0f0")
        self.image_label.pack(pady=20)

        # N√∫t ch·ªçn ·∫£nh (Thi·∫øt k·∫ø ƒë·∫πp h∆°n)
        self.select_button = Button(
            root,
            text="üìÅ Ch·ªçn ·∫£nh",
            command=self.select_image,
            bg="#4CAF50",  # M√†u n·ªÅn xanh l√°
            fg="white",  # M√†u ch·ªØ tr·∫Øng
            font=("Arial", 12, "bold"),
            padx=20, pady=10,  # K√≠ch th∆∞·ªõc n√∫t
            relief="flat",  # Lo·∫°i b·ªè hi·ªáu ·ª©ng n·ªïi (border)
            border=0
        )
        self.select_button.pack(pady=10)

        # N√∫t suy lu·∫≠n (Thi·∫øt k·∫ø ƒë·∫πp h∆°n)
        self.predict_button = Button(
            root,
            text="ü§ñ D·ª± ƒëo√°n",
            command=self.predict_image,
            bg="#2196F3",  # M√†u n·ªÅn xanh d∆∞∆°ng
            fg="white",  # M√†u ch·ªØ tr·∫Øng
            font=("Arial", 12, "bold"),
            padx=20, pady=10,  # K√≠ch th∆∞·ªõc n√∫t
            relief="flat",  # Lo·∫°i b·ªè hi·ªáu ·ª©ng n·ªïi (border)
            border=0
        )
        self.predict_button.pack(pady=10)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        self.result_label = Label(root, text="", font=("Arial", 14), bg="#f0f0f0")
        self.result_label.pack(pady=20)

        self.selected_image_path = None  # ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë∆∞·ª£c ch·ªçn

        # T·∫£i m√¥ h√¨nh khi kh·ªüi ch·∫°y ·ª©ng d·ª•ng
        self.model = self.load_model()

    def load_model(self):
        model = models.resnet50(weights=models.ResNet50_Weights.DEFAULT)
        model.fc = nn.Linear(2048, 20)  # 20 l·ªõp (10 nh√≥m tu·ªïi * 2 gi·ªõi t√≠nh)
        checkpoint_path = "checkpoint/best.pt"
        checkpoint = torch.load(checkpoint_path)
        model.load_state_dict(checkpoint['model'])
        model.to('cuda')
        model.eval()
        return model

    def select_image(self):
        # M·ªü h·ªôp tho·∫°i ch·ªçn t·ªáp
        file_path = filedialog.askopenfilename(
            title="Select Image",
            filetypes=[("Image Files", "*.jpg;*.jpeg;*.png")]
        )
        if file_path:
            self.selected_image_path = file_path

            # Hi·ªÉn th·ªã ·∫£nh tr√™n giao di·ªán
            image = Image.open(file_path)
            image = image.resize((224, 224))  # Resize ·∫£nh
            photo = ImageTk.PhotoImage(image)
            self.image_label.config(image=photo)
            self.image_label.image = photo
            self.result_label.config(text="")  # X√≥a k·∫øt qu·∫£ tr∆∞·ªõc ƒë√≥

    def preprocess_image(self, image_path):
        # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        image = cv2.imread(image_path)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = cv2.resize(image, (224, 224))
        image = np.transpose(image, (2, 0, 1)) / 255  # Chuy·ªÉn sang d·∫°ng (C, H, W) v√† chu·∫©n h√≥a
        image = np.expand_dims(image, axis=0)  # Th√™m chi·ªÅu batch size
        image = torch.from_numpy(image).to('cuda').float()
        return image

    def predict_image(self):
        if not self.selected_image_path:
            self.result_label.config(text="Please select an image first!")
            return

        # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        image = self.preprocess_image(self.selected_image_path)

        # Danh s√°ch c√°c l·ªõp
        categories = ['16-20 Female', '16-20 Male', '21-25 Female', '21-25 Male',
                      '26-30 Female', '26-30 Male', '31-35 Female', '31-35 Male',
                      '36-40 Female', '36-40 Male', '41-45 Female', '41-45 Male',
                      '46-50 Female', '46-50 Male', '51-55 Female', '51-55 Male',
                      '56-60 Female', '56-60 Male']

        # Ti·∫øn h√†nh suy lu·∫≠n
        soft_max = nn.Softmax(dim=1)
        with torch.no_grad():
            output = self.model(image)
            prob = soft_max(output)

        # L·∫•y ch·ªâ s·ªë c·ªßa l·ªõp c√≥ x√°c su·∫•t cao nh·∫•t
        max_value, max_index = torch.max(prob, dim=1)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        predicted_class = categories[max_index.item()]
        confidence = max_value.item()
        self.result_label.config(
            text=f"D·ª± ƒëo√°n: {predicted_class}\nƒê·ªô tin ·∫≠y: {100 * confidence:.2f}%"
        )

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    root = Tk()
    app = InferenceApp(root)
    root.mainloop()
